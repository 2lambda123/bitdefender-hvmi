/*
 * Copyright (c) 2020 Bitdefender
 * SPDX-License-Identifier: Apache-2.0
 */
#ifndef _WIN_AGENT_H_
#define _WIN_AGENT_H_

#include "aghcall.h"
#include "agent.h"

/// Maximum size of the bootstrap code.
#define MAX_BOOTSTRAP_SIZE          512u

/// This flag is used for injecting the PT Filter/VE unloader directly from the NtSetSystemPowerState hook handler
/// WARNING: do not use outside of the NtSetSystemPowerState callback (winpower.c) as
/// it might have some unexpected results.
#define AG_OPT_INJECT_ON_RIP_POWSTATE_CHANGE      0x00000001


///
/// @brief Injection callback.
///
/// Injection callback. Once the bootstrap allocates the agent memory, this callback will be invoked.
/// It should inject the actual code and data for the agent. The reason why a callback is used for this
/// is because we might need the virtual address of the buffer to do some pre-processing (like applying
/// the relocations, in case of a PE executable).
///
/// @param[in]  GuestVirtualAddress Guest virtual address where the boot driver has been injected.
/// @param[in]  AgentTag            The agent tag, as provided to the #IntWinAgentInject function.
/// @param[in]  Context             Optional context, as passed to the #IntWinAgentInject function.
///
typedef INTSTATUS
(*PFUNC_AgentInjection)(
    _In_ QWORD GuestVirtualAddress,
    _In_ DWORD AgentTag,
    _In_opt_ void *Context
    );


///
/// @brief Completion callback.
///
/// Completion callback. This callback is called after the in-guest agent boot driver has finished execution.
/// Note that this callback is not called when the agent process, for example finishes execution; it is called
/// when the trampoline, bootstrap code and the boot driver all finished their job (which may be the delivery
/// of a file, or starting a process). In order to see when an injected processes finished execution, look
/// after process termination events generated by that process.
///
/// @param[in]  GuestVirtualAddress Guest virtual address where the boot driver has been injected.
/// @param[in]  ErrorCode           The injection error code. If anything fails inside the guest, this ErrorCode will
///                                 capture the failure information (for example, that a process could not be started).
/// @param[in]  AgentTag            The agent tag, as provided to the #IntWinAgentInject function.
/// @param[in]  Context             Optional context, as passed to the #IntWinAgentInject function.
///
typedef INTSTATUS
(*PFUNC_AgentCompletion)(
    _In_ QWORD GuestVirtualAddress,
    _In_ DWORD ErrorCode,
    _In_ DWORD AgentTag,
    _In_opt_ void *Context
    );


///
/// @brief Called for VE and PT initialization.
///
/// This callback is called when the boot driver issues a specific hypercall; right now, this is reserved for the VE
/// and PT drivers only, and it is used to do the their initialization or to free them, on unload. If someone needs
/// special handling during agent injection, it can use this callback, as it can do any custom work when invoked
/// by the boot driver.
///
/// @param[in]  GuestVirtualAddress Guest virtual address where the boot driver has been injected.
/// @param[in]  MaxSize             A generic memory size, if anything was allocated by the boot driver.
/// @param[in]  Context             Optional context, as passed to the #IntWinAgentInject function.
///
typedef QWORD
(*PFUNC_AgentDeliver)(
    _In_ QWORD GuestVirtualAddress,
    _In_ DWORD MaxSize,
    _In_opt_ void *Context
    );


///
/// Agent hyper call types.
///
typedef enum _AGENT_HCALL
{
    AGENT_HCALL_VMCALL,     ///< Hyper call using VMCALL.
    AGENT_HCALL_INT3,       ///< Hyper call using INT3.
} AGENT_HCALL;



///
/// Describes one agent running inside the guest.
///
typedef struct _WIN_AGENT
{
    LIST_ENTRY  Link;                               ///< List entry element.

    AGENT_TYPE  AgentType;                          ///< Agent type.
    AGENT_HCALL HcallType;                          ///< Hyper call type.

    PFUNC_AgentInjection    InjectionCallback;      ///< Injection callback.
    PFUNC_AgentDeliver      DeliverCallback;        ///< Delivery callback.
    PFUNC_AgentCompletion   CompletionCallback;     ///< Completion callback.
    void       *Context;                            ///< Optional context. Passed along to the 3 callbacks above.

    // Bootstrap related.
    QWORD       BootstrapAddress;                   ///< Address where the bootstrap was allocated.
    DWORD       BootstrapSize;                      ///< The size of the bootstrap.

    // Driver related.
    QWORD       DriverAddress;                      ///< Address of the boot driver.
    DWORD       DriverSize;                         ///< Size of the boot driver.
    DWORD       DriverEntryPoint;                   ///< Entry point of the boot driver.

    DWORD       AgentTag;                           ///< Agent tag.
    DWORD       Flags;                              ///< Agent flags & state.

    QWORD       Token1;                             ///< Token used by the bootstrap code.
    QWORD       Token2;                             ///< Token used by the bootstrap code.
    QWORD       Token3;                             ///< Token used by the bootstrap code.

    void        *InsCloakRegion;                    ///< Cloak handle used to hide the detoured instruction.
    void        *BootCloakRegion;                   ///< Cloak handle used to hide the bootstrap code.

    BYTE        InstructionBytes[16];               ///< Detoured instruction bytes.
    BYTE        InstructionLen;                     ///< Detoured instruction length.
    BOOLEAN     InstructionRestored;                ///< True if the detours instruction has been restored.
    QWORD       InstructionAddress;                 ///< Address of the detoured instruction.

    // Agent related.
    PBYTE       AgentContent;                       ///< Agent contents. Can be a file, process, driver, etc.
    DWORD       AgentSize;                          ///< The size of the agent.
    /// @brief  Current pointer inside the agent, used to track which chunk must be injected inside the guest.
    DWORD       AgentPosition;
    BOOLEAN     AgentInternal;                      ///< True if the agent is internal to Introcore.

    DWORD       Agid;                               ///< Agent ID. Unique for each injected agent.
    DWORD       ErrorCode;                          ///< Error code encountered during the agent injection.
    /// @brief  PID of the process that will be the parent of the injected process.
    DWORD       Pid;
    SIZE_T      ArgsLen;                            ///< Length of the arguments.
    CHAR        Args[IG_MAX_COMMAND_LINE_LENGTH];   ///< Agent arguments.

    CHAR        Name[IG_MAX_AGENT_NAME_LENGTH];     ///< Agent name.

    /// @brief  Offset of the trampoline code which jumps back to the detoured instruction.
    WORD        OffsetJumpBack;

    BYTE        BootStrap[MAX_BOOTSTRAP_SIZE];      ///< The bootstrap code.

    DWORD       Options;                            ///< Agent options.

} WIN_AGENT, *PWIN_AGENT;


//
// API
//
BOOLEAN
IntWinAgentIsRipInsideCurrentAgent(
    _In_ QWORD Rip
    );

INTSTATUS
IntWinAgentHandleVmcall(
    _In_ QWORD Rip
    );

INTSTATUS
IntWinAgentHandleInt3(
    _In_ QWORD Rip,
    _In_ DWORD CpuNumber
    );

INTSTATUS
IntWinAgentInject(
    _In_ PFUNC_AgentInjection InjectionCallback,
    _In_ PFUNC_AgentCompletion CompletionCallback,
    _In_opt_ PFUNC_AgentDeliver DeliverCallback,
    _In_opt_ void *Context,
    _In_ PBYTE AgentContent,
    _In_ DWORD AgentSize,
    _In_ BOOLEAN AgentInternal,
    _In_ DWORD AgentTag,
    _In_ AGENT_TYPE AgentType,
    _In_opt_z_ const CHAR *Name,
    _In_ DWORD Options,
    _In_opt_ const CHAR *Args,
    _In_opt_ DWORD Pid,
    _Outptr_opt_ PWIN_AGENT *Agent
    );

INTSTATUS
IntWinAgentInjectBreakpoint(
    _In_ PFUNC_AgentInjection InjectionCallback,
    _In_opt_ void *Context,
    _Outptr_opt_ PWIN_AGENT *Agent
    );

INTSTATUS
IntWinAgentInjectTrampoline(
    void
    );

INTSTATUS
IntWinAgentEnableInjection(
    void
    );

void
IntWinAgentCheckIfProcessAgentAndIncrement(
    _In_ CHAR *ImageName,
    _Out_ BOOLEAN *IsAgent,
    _Out_ DWORD *Tag
    );

void
IntWinAgentCheckIfProcessAgentAndDecrement(
    _In_ CHAR *ImageName,
    _Out_opt_ BOOLEAN *IsAgent,
    _Out_opt_ DWORD *Tag,
    _Out_opt_ BOOLEAN *Removed
    );

void
IntWinAgentRemoveEntryByAgid(
    _In_ DWORD Counter,
    _Out_opt_ DWORD *Tag
    );

void
IntWinAgentDisablePendingAgents(
    void
    );

BOOLEAN
IntWinAgentIsPtrInTrampoline(
    _In_ QWORD Ptr,
    _In_ THS_PTR_TYPE Type
    );

AG_WAITSTATE
IntWinAgentGetState(
    _Out_opt_ DWORD *Tag
    );

INTSTATUS
IntWinAgentActivatePendingAgent(
    void
    );

void
IntWinAgentInit(
    void
    );

INTSTATUS
IntWinAgentUnInit(
    void
    );

#endif // _WIN_AGENT_H_
